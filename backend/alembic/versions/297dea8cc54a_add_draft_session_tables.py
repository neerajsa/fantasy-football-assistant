"""Add draft session tables

Revision ID: 297dea8cc54a
Revises: 22e32bccc0ad
Create Date: 2025-08-05 08:35:11.364842

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '297dea8cc54a'
down_revision: Union[str, None] = '22e32bccc0ad'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create enum types if they don't exist
    connection = op.get_bind()
    
    # Check and create scoring_type enum
    result = connection.execute(sa.text("SELECT 1 FROM pg_type WHERE typname = 'scoring_type'"))
    if not result.fetchone():
        scoring_type_enum = postgresql.ENUM('standard', 'ppr', 'half_ppr', name='scoring_type')
        scoring_type_enum.create(connection)
    
    # Check and create draft_status enum
    result = connection.execute(sa.text("SELECT 1 FROM pg_type WHERE typname = 'draft_status'"))
    if not result.fetchone():
        draft_status_enum = postgresql.ENUM('created', 'in_progress', 'completed', 'abandoned', name='draft_status')
        draft_status_enum.create(connection)
    
    # Check and create draft_type enum
    result = connection.execute(sa.text("SELECT 1 FROM pg_type WHERE typname = 'draft_type'"))
    if not result.fetchone():
        draft_type_enum = postgresql.ENUM('snake', 'linear', name='draft_type')
        draft_type_enum.create(connection)
    
    op.create_table('draft_sessions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('num_teams', sa.Integer(), nullable=False),
    sa.Column('draft_type', postgresql.ENUM('snake', 'linear', name='draft_type'), nullable=False),
    sa.Column('scoring_type', postgresql.ENUM('standard', 'ppr', 'half_ppr', name='scoring_type'), nullable=False),
    sa.Column('roster_positions', sa.JSON(), nullable=False),
    sa.Column('status', postgresql.ENUM('created', 'in_progress', 'completed', 'abandoned', name='draft_status'), nullable=True),
    sa.Column('current_round', sa.Integer(), nullable=True),
    sa.Column('current_pick', sa.Integer(), nullable=True),
    sa.Column('current_team_index', sa.Integer(), nullable=True),
    sa.Column('total_rounds', sa.Integer(), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('draft_teams',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('draft_session_id', sa.UUID(), nullable=False),
    sa.Column('team_index', sa.Integer(), nullable=False),
    sa.Column('team_name', sa.String(length=100), nullable=False),
    sa.Column('is_user', sa.Boolean(), nullable=True),
    sa.Column('current_roster', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['draft_session_id'], ['draft_sessions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('draft_picks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('draft_session_id', sa.UUID(), nullable=False),
    sa.Column('team_id', sa.UUID(), nullable=False),
    sa.Column('player_id', sa.UUID(), nullable=True),
    sa.Column('round_number', sa.Integer(), nullable=False),
    sa.Column('pick_number', sa.Integer(), nullable=False),
    sa.Column('team_pick_number', sa.Integer(), nullable=False),
    sa.Column('picked_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('pick_time_seconds', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['draft_session_id'], ['draft_sessions.id'], ),
    sa.ForeignKeyConstraint(['player_id'], ['custom_rankings_players.id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['draft_teams.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.add_column('fantasypros_players', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.add_column('fantasypros_players', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('fantasypros_players', 'updated_at')
    op.drop_column('fantasypros_players', 'created_at')
    op.drop_table('draft_picks')
    op.drop_table('draft_teams')
    op.drop_table('draft_sessions')
    
    # Drop enum types
    connection = op.get_bind()
    connection.execute(sa.text("DROP TYPE IF EXISTS draft_status"))
    connection.execute(sa.text("DROP TYPE IF EXISTS draft_type"))
    # Note: Not dropping scoring_type as it might be used elsewhere
    # ### end Alembic commands ###
